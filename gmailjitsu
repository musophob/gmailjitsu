#!/usr/bin/env bash

########################################
# GLOBAL VARS
########################################

ARGS="${*}"
PROMPT="\n\xe2\x9e\x94"
JITSURC="$HOME/.jitsurc"


########################################
# SETTINGS MODULE
########################################

function settings () {
    echo
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "☯ ☯ ☯ ☯ ☯ ☯     settings     ☯ ☯ ☯ ☯ ☯ ☯"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"    
    echo
    echo "WARNING: These preferences will save whatever you type into a hidden file on your "
    echo "computer that someone could potentially read. gmailjitsu and its contributors "
    echo "are not responsible for any bad things that might happen."
    echo

    echo -ne "To store your user name, type it here. " $PROMPT " "
    read C57b5e065a
    if [ "$C57b5e065a" != "" ]; then
      echo
      echo "Got it!"
      echo
      echo
    else
      echo
      echo "No user name, no problem."
      echo
      echo
    fi

    echo -ne "To store your password, type it here. " $PROMPT " "
    read -s B44e7c17ed
    echo
    if [ "$B44e7c17ed" != "" ]; then
      echo
      echo "Roger"
      echo
      echo
    else
      echo
      echo "No password, no cry."
      echo
      echo
    fi
    
    if [ $C57b5e065a ] || [ $B44e7c17ed ]; then
        
        >| $JITSURC

        if [ $C57b5e065a ]; then
        echo "$C57b5e065a" >> $JITSURC
        fi

        if [ $B44e7c17ed ]; then
            echo "$B44e7c17ed" >> $JITSURC
        fi
    fi

  exit 1
}


########################################
# MAN PAGE
########################################

function man_page () {
    echo
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "☯ ☯ ☯ ☯ ☯ ☯   help / usage   ☯ ☯ ☯ ☯ ☯ ☯"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo
    echo
    echo "'gmailjitsu' - run in standard mode."
    echo
    echo "'gmailjitsu --settings' - add or update permanent login credentials."
    echo
    echo
    exit 1
}


########################################
# ARGV PARSER
########################################

if [ "$ARGS" == "--settings" ]; then
  settings
elif [ "$ARGS" == "--help" ]; then
  man_page
fi



########################################
# BASH STACK:
########################################

set -o errtrace
set -o errexit
set -o nounset


declare -a stack
stack_push () {
    [ $# -eq 1 ] || stack_err "stack_push takes one argument" || return 1
    stack[${#stack[@]}]="$1"
}
stack_pop () {
    index=$(stack_index) || stack_err "index out of range" || return 1
    unset stack[$index]
}
stack_item () {
    [ $# -ge 1 ] && item="$1" || item="0"
    index=$(stack_index $item) || stack_err "index out of range" || return 1
    echo ${stack[$index]}
}
stack_index () {
    [ $# -ge 1 ] && index="$1" || index="0" || true
    [ "$index" -ge 0 ] && [ "$index" -lt ${#stack[@]} ] || return 1
    expr ${#stack[@]} - "$index" - 1 || true
}
stack_count () {
    echo ${#stack[@]}
}
stack_list () {
    echo ${stack[@]}
}
stack_err () {
    echo "Stack error: $@" 1>&2
    return 1
}



########################################
# BASH XML PARSER:
########################################

bash_xml_sax_parse () {
    handle_element_start="$1"
    handle_element_end="$2"
    handle_characters="$3"
    # assumes each line contains one element
    cat "/dev/stdin" | bash_xml_split | while read line; do
        case "$line" in
            "<?"*)      ;;
            "</"*)      [ -z "$handle_element_end" ]    || "$handle_element_end"    "$line" "$(expr "$line" : '</*\([^ />]*\)')" ;;
            "<"*"/>")   [ -z "$handle_element_start" ]  || "$handle_element_start"  "$line" "$(expr "$line" : '</*\([^ />]*\)')"
                        [ -z "$handle_element_end" ]    || "$handle_element_end"    "$line" "$(expr "$line" : '</*\([^ />]*\)')" ;;
            "<"*)       [ -z "$handle_element_start" ]  || "$handle_element_start"  "$line" "$(expr "$line" : '</*\([^ />]*\)')" ;;
            *)          [ -z "$handle_characters" ]     || "$handle_characters"     "$line" ;;
        esac
    done
}

# splits an XML document into a stream of lines containing one element each and removes blanks
# TODO: make this more robust
bash_xml_split () {
    sed -e 's/</\
</g' -e 's/>/>\
/g' | sed -e '/^ *$/d'
}



########################################
# EXAMPLE: XML prettifier
########################################

xml_prettify () {
    bash_xml_sax_parse xml_prettify_start xml_prettify_end xml_prettify_characters
}
xml_prettify_indent="2"
xml_prettify_print () {
    printf "%*s%s\n" $(expr $(stack_count) \* $xml_prettify_indent) "" "$1"
}
xml_prettify_start () {
    case "$1" in
        *"/>") ;; # HACK: skip self terminating tags
        *) xml_prettify_print "$1" ;;
    esac
    stack_push "$2"
}
xml_prettify_end () {
    stack_pop
    xml_prettify_print "$1"
}
xml_prettify_characters () {
    xml_prettify_print "$1"
    return 0
}

gmail_parse_feed () {
    bash_xml_sax_parse gmail_parse_feed_element_start gmail_parse_feed_element_end gmail_parse_feed_characters
}
gmail_parse_feed_element_start () {
    [ "$2" != "entry" ] || (gmail_entry_name="" && gmail_entry_title="" && gmail_entry_date="")
    stack_push "$2"
}
gmail_parse_feed_element_end () {
    [ "$2" != "entry" ] || printf "%20s | %-25s | %s\n" "$gmail_entry_date" "$gmail_entry_name" "$gmail_entry_title"
    stack_pop
}
gmail_parse_feed_characters () {
    case "$(stack_list)" in
        "feed entry title")       gmail_entry_title="$1" ;;
        "feed entry issued")      gmail_entry_date="$1"  ;;
        "feed entry author name") gmail_entry_name="$1"  ;;
    esac
}

gmail_fetch_feed () {
    if [ -f $JITSURC ]; then
      C57b5e065a=$(sed -n '1p' "$JITSURC")
      B44e7c17ed=$(sed -n '2p' "$JITSURC")
      curl -u $C57b5e065a:$B44e7c17ed --silent 'https://mail.google.com/mail/feed/atom'
    else
      curl -u "$USER" --silent 'https://mail.google.com/mail/feed/atom'
    fi
}

gmail_inbox () {
    gmail_fetch_feed | gmail_parse_feed
}



########################################
# GMAIL CHECKER
########################################

echo
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "☯ ☯ ☯ ☯ ☯ ☯    gmailjitsu    ☯ ☯ ☯ ☯ ☯ ☯"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo
echo -ne "Enter your search, or press enter to see all messages." $PROMPT " "
read QUERY



if [ ! -f $JITSURC ]; then
  echo -n "Username: "
  read USER
fi

if [ $QUERY ]; then
    echo
    if ! gmail_inbox | grep -i "$QUERY"; then
      echo "No messages matching \"$QUERY\". Exiting..."
    fi
    RESULTS=$(gmail_inbox | grep -i "$QUERY")
elif [ -z "$QUERY" ]; then
    echo
    INBOX=$(gmail_inbox)
    echo "$INBOX"
fi


echo
echo -ne "Go to Gmail? (enter 'y' or press enter to exit)" $PROMPT " "
read GO_TO_GMAIL
if [ "$GO_TO_GMAIL" == "y" ]; then
    open "https://mail.google.com/mail/u/0/#search/in%3Ainbox+$QUERY"
fi


echo

exit 1



